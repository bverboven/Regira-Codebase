using Regira.Dimensions;
using Regira.Utilities;

namespace Drawing.Testing;

[TestFixture]
public class DimensionTests
{
    // generated by GitHub Copilot
    [Test]
    public void MmToIn_Scalar_ReturnsCorrectValue()
    {
        float mm = 25.4f;
        float expected = 1f;
        Assert.That(DimensionsUtility.MmToIn(mm), Is.EqualTo(expected).Within(0.0001f));
    }

    [Test]
    public void MmToIn_Size2D_ReturnsCorrectValue()
    {
        var mm = new Size2D(25.4f, 50.8f);
        var expected = new Size2D(1f, 2f);
        var result = DimensionsUtility.MmToIn(mm);
        Assert.That(result.Width, Is.EqualTo(expected.Width).Within(0.0001f));
        Assert.That(result.Height, Is.EqualTo(expected.Height).Within(0.0001f));
    }

    [Test]
    public void InToMm_Scalar_ReturnsCorrectValue()
    {
        float inches = 2f;
        float expected = 50.8f;
        Assert.That(DimensionsUtility.InToMm(inches), Is.EqualTo(expected).Within(0.0001f));
    }

    [Test]
    public void InToMm_Size2D_ReturnsCorrectValue()
    {
        var inches = new Size2D(1f, 2f);
        var expected = new Size2D(25.4f, 50.8f);
        var result = DimensionsUtility.InToMm(inches);
        Assert.That(result.Width, Is.EqualTo(expected.Width).Within(0.0001f));
        Assert.That(result.Height, Is.EqualTo(expected.Height).Within(0.0001f));
    }

    [Test]
    public void MmToPt_Scalar_ReturnsCorrectValue()
    {
        float mm = 25.4f;
        int dpi = 96;
        float expected = 96f;
        Assert.That(DimensionsUtility.MmToPt(mm, dpi), Is.EqualTo(expected).Within(0.0001f));
    }

    [Test]
    public void MmToPt_Size2D_ReturnsCorrectValue()
    {
        var mm = new Size2D(25.4f, 50.8f);
        int dpi = 96;
        var expected = new Size2D(96f, 192f);
        var result = DimensionsUtility.MmToPt(mm, dpi);
        Assert.That(result.Width, Is.EqualTo(expected.Width).Within(0.0001f));
        Assert.That(result.Height, Is.EqualTo(expected.Height).Within(0.0001f));
    }

    [Test]
    public void InToPt_Scalar_ReturnsCorrectValue()
    {
        float inches = 2f;
        int dpi = 96;
        float expected = 192f;
        Assert.That(DimensionsUtility.InToPt(inches, dpi), Is.EqualTo(expected).Within(0.0001f));
    }

    [Test]
    public void InToPt_Size2D_ReturnsCorrectValue()
    {
        var inches = new Size2D(1f, 2f);
        int dpi = 96;
        var expected = new Size2D(96f, 192f);
        var result = DimensionsUtility.InToPt(inches, dpi);
        Assert.That(result.Width, Is.EqualTo(expected.Width).Within(0.0001f));
        Assert.That(result.Height, Is.EqualTo(expected.Height).Within(0.0001f));
    }

    [Test]
    public void PtToMm_Scalar_ReturnsCorrectValue()
    {
        float points = 96f;
        int dpi = 96;
        float expected = 25.4f;
        Assert.That(DimensionsUtility.PtToMm(points, dpi), Is.EqualTo(expected).Within(0.0001f));
    }

    [Test]
    public void PtToMm_Size2D_ReturnsCorrectValue()
    {
        var points = new Size2D(96f, 192f);
        int dpi = 96;
        var expected = new Size2D(25.4f, 50.8f);
        var result = DimensionsUtility.PtToMm(points, dpi);
        Assert.That(result.Width, Is.EqualTo(expected.Width).Within(0.0001f));
        Assert.That(result.Height, Is.EqualTo(expected.Height).Within(0.0001f));
    }

    [Test]
    public void PtToIn_Scalar_ReturnsCorrectValue()
    {
        float points = 192f;
        int dpi = 96;
        float expected = 2f;
        Assert.That(DimensionsUtility.PtToIn(points, dpi), Is.EqualTo(expected).Within(0.0001f));
    }

    [Test]
    public void PtToIn_Size2D_ReturnsCorrectValue()
    {
        var points = new Size2D(96f, 192f);
        int dpi = 96;
        var expected = new Size2D(1f, 2f);
        var result = DimensionsUtility.PtToIn(points, dpi);
        Assert.That(result.Width, Is.EqualTo(expected.Width).Within(0.0001f));
        Assert.That(result.Height, Is.EqualTo(expected.Height).Within(0.0001f));
    }

    [Test]
    public void ModifyDpi_AdjustsSizeCorrectly()
    {
        var size = new Size2D(200f, 100f);
        int srcDpi = 200;
        int targetDpi = 100;
        var expected = new Size2D(100f, 50f);
        var result = DimensionsUtility.ModifyDpi(size, srcDpi, targetDpi);
        Assert.That(result.Width, Is.EqualTo(expected.Width).Within(0.0001f));
        Assert.That(result.Height, Is.EqualTo(expected.Height).Within(0.0001f));
    }

    [Test]
    public void CalculateSize_FromPoints_ReturnsCorrectSize()
    {
        var topLeft = new Point2D(10, 20);
        var bottomRight = new Point2D(30, 50);
        var expected = new Size2D(20, 30);
        var result = DimensionsUtility.CalculateSize(topLeft, bottomRight);
        Assert.That(result.Width, Is.EqualTo(expected.Width));
        Assert.That(result.Height, Is.EqualTo(expected.Height));
    }

    [Test]
    public void CalculateSize_ScaleToFit_ReturnsCorrectScaledSize()
    {
        var source = new Size2D(200, 100);
        var target = new Size2D(100, 100);
        var expected = new Size2D(100, 50);
        var result = DimensionsUtility.CalculateSize(source, target);
        Assert.That(result.Width, Is.EqualTo(expected.Width));
        Assert.That(result.Height, Is.EqualTo(expected.Height));
    }

    [Test]
    public void GetPixels_Millimeters_ReturnsCorrectPixels()
    {
        float mm = 25.4f;
        int dpi = 96;
        int expected = 96;
        int result = DimensionsUtility.GetPixels(mm, LengthUnit.Millimeters, 0, dpi);
        Assert.That(result, Is.EqualTo(expected));
    }

    [Test]
    public void GetPixels_Inches_ReturnsCorrectPixels()
    {
        float inches = 2f;
        int dpi = 96;
        int expected = 192;
        int result = DimensionsUtility.GetPixels(inches, LengthUnit.Inches, 0, dpi);
        Assert.That(result, Is.EqualTo(expected));
    }

    [Test]
    public void GetPixels_Percent_ReturnsCorrectPixels()
    {
        float percent = 50f;
        int targetDimension = 200;
        int expected = 100;
        int result = DimensionsUtility.GetPixels(percent, LengthUnit.Percent, targetDimension);
        Assert.That(result, Is.EqualTo(expected));
    }

    [Test]
    public void GetPixels_Points_ReturnsCorrectPixels()
    {
        float points = 123f;
        int expected = 123;
        int result = DimensionsUtility.GetPixels(points, LengthUnit.Points);
        Assert.That(result, Is.EqualTo(expected));
    }

    [Test]
    public void ToPoints_ReturnsCorrectPoints()
    {
        var position = new Position2D(10, 20, 5, 15);
        var totalSize = new Size2D(100, 200);
        var (topLeft, bottomRight) = DimensionsUtility.ToPoints(position, totalSize);
        Assert.That(topLeft.X, Is.EqualTo(20));
        Assert.That(topLeft.Y, Is.EqualTo(10));
        Assert.That(bottomRight.X, Is.EqualTo(85));
        Assert.That(bottomRight.Y, Is.EqualTo(195));
    }

    [Test]
    public void ToPointSize_ReturnsCorrectPointAndSize()
    {
        var position = new Position2D(10, 20, 5, 15);
        var totalSize = new Size2D(100, 200);
        var (coordinate, size) = DimensionsUtility.ToPointSize(position, totalSize);
        Assert.That(coordinate.X, Is.EqualTo(20));
        Assert.That(coordinate.Y, Is.EqualTo(10));
        Assert.That(size.Width, Is.EqualTo(65));
        Assert.That(size.Height, Is.EqualTo(185));
    }

    [Test]
    public void ToPosition_ReturnsCorrectPosition()
    {
        var topLeft = new Point2D(20, 10);
        var bottomRight = new Point2D(85, 195);
        var totalSize = new Size2D(100, 200);
        var pos = DimensionsUtility.ToPosition(topLeft, bottomRight, totalSize);
        Assert.That(pos.Top, Is.EqualTo(10));
        Assert.That(pos.Left, Is.EqualTo(20));
        Assert.That(pos.Bottom, Is.EqualTo(5));
        Assert.That(pos.Right, Is.EqualTo(15));
    }
}